version: v1.0
name: Initial Pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004
blocks:
  - name: Install Dependencies
    task:
      jobs:
        - name: composer
          commands:
            - checkout
            - cache restore
            - composer install
            - npm install
            - cache store
            - cp .env.example .env
            - 'php artisan key:generate'
      env_vars:
        - name: APP_NEW
          value: prod
    dependencies: []
  - name: Run Code Analysis
    task:
      jobs:
        - name: phpmd
          commands:
            - php vendor/bin/phpmd app/ text phpmd_ruleset.xml
        - name: phpcs
          commands:
            - php vendor/bin/phpcs app --report-full --standard=PSR2
        - name: phpcpd
          commands:
            - 'curl -L https://phar.phpunit.de/phpcpd.phar -o phpcpd.phar'
            - php phpcpd.phar app/ --min-lines=10
      prologue:
        commands:
          - checkout
          - cache restore
    dependencies:
      - Install Dependencies
  - name: Run Unit Test
    dependencies:
      - Run Code Analysis
    task:
      jobs:
        - name: pdpunit
          commands:
            - 'checkout '
            - 'cache restore '
            - ./vendor/bin/phpunit
  - name: Run browser tests
    dependencies:
      - Run Unit Test
    task:
      jobs:
        - name: laravel desk
          commands:
            - checkout
            - cp .env.example .env
            - touch database/database.sqlite
            - cache restore
            - 'php artisan key:generate'
            - 'php artisan dusk:update --detect'
            - php artisan serve --env=dusk.local --port=8010 &
            - php artisan dusk
  - name: Run Security Tests
    dependencies:
      - Run browser tests
    task:
      jobs:
        - name: Sensiolabs
          commands:
            - checkout
            - 'cache restore '
            - 'git clone https://github.com/sensiolabs/security-checker.git'
            - cd security-checker
            - composer install
      prologue:
        commands:
          - cache restore
  - name: Build app
    dependencies:
      - Install Dependencies
    task:
      epilogue:
        always:
          commands:
            - artifact push job logs/test.log
            - artifact push job screenshots
      jobs:
        - name: tests
          commands:
            - make
promotions:
  - name: Production Deployment
    pipeline_file: pipeline_2.yml
    auto_promote:
      when: branch = 'master' AND result = 'passed'
